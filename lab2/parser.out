Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> instructions_opt
Rule 3     instructions_opt -> instructions
Rule 4     instructions_opt -> empty
Rule 5     instructions -> instruction
Rule 6     instructions -> instruction instructions
Rule 7     instruction -> assignment ;
Rule 8     instruction -> statement ;
Rule 9     instruction -> { instructions }
Rule 10    instruction -> IF ( condition ) instruction
Rule 11    instruction -> IF ( condition ) instruction ELSE instruction
Rule 12    instruction -> WHILE ( condition ) instruction
Rule 13    instruction -> FOR var = range instruction
Rule 14    range -> expression : expression
Rule 15    condition -> expression EQ expression
Rule 16    condition -> expression NEQ expression
Rule 17    condition -> expression LE expression
Rule 18    condition -> expression GE expression
Rule 19    condition -> expression < expression
Rule 20    condition -> expression > expression
Rule 21    assignment_op -> MULASSIGN
Rule 22    assignment_op -> DIVASSIGN
Rule 23    assignment_op -> SUBASSIGN
Rule 24    assignment_op -> ADDASSIGN
Rule 25    assignment_op -> =
Rule 26    assignment -> var assignment_op expression
Rule 27    assignment -> matrix_element assignment_op expression
Rule 28    assignment -> vector_element assignment_op expression
Rule 29    matrix_function -> matrix_function_name ( INT )
Rule 30    matrix_function_name -> EYE
Rule 31    matrix_function_name -> ONES
Rule 32    matrix_function_name -> ZEROS
Rule 33    matrix -> [ vectors ]
Rule 34    vectors -> vectors , vector
Rule 35    vectors -> vector
Rule 36    vector -> [ variables ]
Rule 37    variables -> variables , variable
Rule 38    variables -> variable
Rule 39    variable -> number
Rule 40    variable -> var
Rule 41    variable -> element
Rule 42    element -> vector_element
Rule 43    element -> matrix_element
Rule 44    vector_element -> ID [ INT ]
Rule 45    matrix_element -> ID [ INT , INT ]
Rule 46    var -> ID
Rule 47    number -> INT
Rule 48    number -> FLOAT
Rule 49    string -> STRING
Rule 50    expression -> expression + expression
Rule 51    expression -> expression - expression
Rule 52    expression -> expression * expression
Rule 53    expression -> expression / expression
Rule 54    expression -> expression DOTADD expression
Rule 55    expression -> expression DOTSUB expression
Rule 56    expression -> expression DOTMUL expression
Rule 57    expression -> expression DOTDIV expression
Rule 58    expression -> num_expression
Rule 59    expression -> matrix
Rule 60    expression -> matrix_function
Rule 61    expression -> uminus
Rule 62    expression -> transposition
Rule 63    expression -> matrix_element
Rule 64    expression -> vector_element
Rule 65    num_expression -> number
Rule 66    num_expression -> var
Rule 67    uminus -> - expression
Rule 68    transposition -> expression '
Rule 69    statement -> BREAK
Rule 70    statement -> CONTINUE
Rule 71    statement -> RETURN expression
Rule 72    statement -> PRINT print_vals
Rule 73    print_vals -> print_vals , print_val
Rule 74    print_vals -> print_val
Rule 75    print_val -> string
Rule 76    print_val -> expression

Terminals, with rules where they appear

'                    : 68
(                    : 10 11 12 29
)                    : 10 11 12 29
*                    : 52
+                    : 50
,                    : 34 37 45 73
-                    : 51 67
/                    : 53
:                    : 14
;                    : 7 8
<                    : 19
=                    : 13 25
>                    : 20
ADDASSIGN            : 24
BREAK                : 69
CONTINUE             : 70
DIVASSIGN            : 22
DOTADD               : 54
DOTDIV               : 57
DOTMUL               : 56
DOTSUB               : 55
ELSE                 : 11
EQ                   : 15
EYE                  : 30
FLOAT                : 48
FOR                  : 13
GE                   : 18
ID                   : 44 45 46
IF                   : 10 11
INT                  : 29 44 45 45 47
LE                   : 17
MULASSIGN            : 21
NEQ                  : 16
ONES                 : 31
PRINT                : 72
RETURN               : 71
STRING               : 49
SUBASSIGN            : 23
WHILE                : 12
ZEROS                : 32
[                    : 33 36 44 45
]                    : 33 36 44 45
error                : 
{                    : 9
}                    : 9

Nonterminals, with rules where they appear

assignment           : 7
assignment_op        : 26 27 28
condition            : 10 11 12
element              : 41
empty                : 4
expression           : 14 14 15 15 16 16 17 17 18 18 19 19 20 20 26 27 28 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 67 68 71 76
instruction          : 5 6 10 11 11 12 13
instructions         : 3 6 9
instructions_opt     : 2
matrix               : 59
matrix_element       : 27 43 63
matrix_function      : 60
matrix_function_name : 29
num_expression       : 58
number               : 39 65
print_val            : 73 74
print_vals           : 72 73
program              : 0
range                : 13
statement            : 8
string               : 75
transposition        : 62
uminus               : 61
var                  : 13 26 40 66
variable             : 37 38
variables            : 36 37
vector               : 34 35
vector_element       : 28 42 64
vectors              : 33 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . instructions_opt
    (3) instructions_opt -> . instructions
    (4) instructions_opt -> . empty
    (5) instructions -> . instruction
    (6) instructions -> . instruction instructions
    (1) empty -> .
    (7) instruction -> . assignment ;
    (8) instruction -> . statement ;
    (9) instruction -> . { instructions }
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (12) instruction -> . WHILE ( condition ) instruction
    (13) instruction -> . FOR var = range instruction
    (26) assignment -> . var assignment_op expression
    (27) assignment -> . matrix_element assignment_op expression
    (28) assignment -> . vector_element assignment_op expression
    (69) statement -> . BREAK
    (70) statement -> . CONTINUE
    (71) statement -> . RETURN expression
    (72) statement -> . PRINT print_vals
    (46) var -> . ID
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]

    $end            reduce using rule 1 (empty -> .)
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    empty                          shift and go to state 4
    instruction                    shift and go to state 5
    assignment                     shift and go to state 6
    statement                      shift and go to state 7
    var                            shift and go to state 12
    matrix_element                 shift and go to state 13
    vector_element                 shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (2) program -> instructions_opt .

    $end            reduce using rule 2 (program -> instructions_opt .)


state 3

    (3) instructions_opt -> instructions .

    $end            reduce using rule 3 (instructions_opt -> instructions .)


state 4

    (4) instructions_opt -> empty .

    $end            reduce using rule 4 (instructions_opt -> empty .)


state 5

    (5) instructions -> instruction .
    (6) instructions -> instruction . instructions
    (5) instructions -> . instruction
    (6) instructions -> . instruction instructions
    (7) instruction -> . assignment ;
    (8) instruction -> . statement ;
    (9) instruction -> . { instructions }
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (12) instruction -> . WHILE ( condition ) instruction
    (13) instruction -> . FOR var = range instruction
    (26) assignment -> . var assignment_op expression
    (27) assignment -> . matrix_element assignment_op expression
    (28) assignment -> . vector_element assignment_op expression
    (69) statement -> . BREAK
    (70) statement -> . CONTINUE
    (71) statement -> . RETURN expression
    (72) statement -> . PRINT print_vals
    (46) var -> . ID
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]

    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)
    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    instruction                    shift and go to state 5
    instructions                   shift and go to state 20
    assignment                     shift and go to state 6
    statement                      shift and go to state 7
    var                            shift and go to state 12
    matrix_element                 shift and go to state 13
    vector_element                 shift and go to state 14

state 6

    (7) instruction -> assignment . ;

    ;               shift and go to state 21


state 7

    (8) instruction -> statement . ;

    ;               shift and go to state 22


state 8

    (9) instruction -> { . instructions }
    (5) instructions -> . instruction
    (6) instructions -> . instruction instructions
    (7) instruction -> . assignment ;
    (8) instruction -> . statement ;
    (9) instruction -> . { instructions }
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (12) instruction -> . WHILE ( condition ) instruction
    (13) instruction -> . FOR var = range instruction
    (26) assignment -> . var assignment_op expression
    (27) assignment -> . matrix_element assignment_op expression
    (28) assignment -> . vector_element assignment_op expression
    (69) statement -> . BREAK
    (70) statement -> . CONTINUE
    (71) statement -> . RETURN expression
    (72) statement -> . PRINT print_vals
    (46) var -> . ID
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]

    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    instructions                   shift and go to state 23
    instruction                    shift and go to state 5
    assignment                     shift and go to state 6
    statement                      shift and go to state 7
    var                            shift and go to state 12
    matrix_element                 shift and go to state 13
    vector_element                 shift and go to state 14

state 9

    (10) instruction -> IF . ( condition ) instruction
    (11) instruction -> IF . ( condition ) instruction ELSE instruction

    (               shift and go to state 24


state 10

    (12) instruction -> WHILE . ( condition ) instruction

    (               shift and go to state 25


state 11

    (13) instruction -> FOR . var = range instruction
    (46) var -> . ID

    ID              shift and go to state 27

    var                            shift and go to state 26

state 12

    (26) assignment -> var . assignment_op expression
    (21) assignment_op -> . MULASSIGN
    (22) assignment_op -> . DIVASSIGN
    (23) assignment_op -> . SUBASSIGN
    (24) assignment_op -> . ADDASSIGN
    (25) assignment_op -> . =

    MULASSIGN       shift and go to state 29
    DIVASSIGN       shift and go to state 30
    SUBASSIGN       shift and go to state 31
    ADDASSIGN       shift and go to state 32
    =               shift and go to state 33

    assignment_op                  shift and go to state 28

state 13

    (27) assignment -> matrix_element . assignment_op expression
    (21) assignment_op -> . MULASSIGN
    (22) assignment_op -> . DIVASSIGN
    (23) assignment_op -> . SUBASSIGN
    (24) assignment_op -> . ADDASSIGN
    (25) assignment_op -> . =

    MULASSIGN       shift and go to state 29
    DIVASSIGN       shift and go to state 30
    SUBASSIGN       shift and go to state 31
    ADDASSIGN       shift and go to state 32
    =               shift and go to state 33

    assignment_op                  shift and go to state 34

state 14

    (28) assignment -> vector_element . assignment_op expression
    (21) assignment_op -> . MULASSIGN
    (22) assignment_op -> . DIVASSIGN
    (23) assignment_op -> . SUBASSIGN
    (24) assignment_op -> . ADDASSIGN
    (25) assignment_op -> . =

    MULASSIGN       shift and go to state 29
    DIVASSIGN       shift and go to state 30
    SUBASSIGN       shift and go to state 31
    ADDASSIGN       shift and go to state 32
    =               shift and go to state 33

    assignment_op                  shift and go to state 35

state 15

    (69) statement -> BREAK .

    ;               reduce using rule 69 (statement -> BREAK .)


state 16

    (70) statement -> CONTINUE .

    ;               reduce using rule 70 (statement -> CONTINUE .)


state 17

    (71) statement -> RETURN . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 36
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 18

    (72) statement -> PRINT . print_vals
    (73) print_vals -> . print_vals , print_val
    (74) print_vals -> . print_val
    (75) print_val -> . string
    (76) print_val -> . expression
    (49) string -> . STRING
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    STRING          shift and go to state 59
    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    print_vals                     shift and go to state 55
    print_val                      shift and go to state 56
    string                         shift and go to state 57
    expression                     shift and go to state 58
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 19

    (46) var -> ID .
    (45) matrix_element -> ID . [ INT , INT ]
    (44) vector_element -> ID . [ INT ]

    MULASSIGN       reduce using rule 46 (var -> ID .)
    DIVASSIGN       reduce using rule 46 (var -> ID .)
    SUBASSIGN       reduce using rule 46 (var -> ID .)
    ADDASSIGN       reduce using rule 46 (var -> ID .)
    =               reduce using rule 46 (var -> ID .)
    [               shift and go to state 60


state 20

    (6) instructions -> instruction instructions .

    $end            reduce using rule 6 (instructions -> instruction instructions .)
    }               reduce using rule 6 (instructions -> instruction instructions .)


state 21

    (7) instruction -> assignment ; .

    {               reduce using rule 7 (instruction -> assignment ; .)
    IF              reduce using rule 7 (instruction -> assignment ; .)
    WHILE           reduce using rule 7 (instruction -> assignment ; .)
    FOR             reduce using rule 7 (instruction -> assignment ; .)
    BREAK           reduce using rule 7 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 7 (instruction -> assignment ; .)
    RETURN          reduce using rule 7 (instruction -> assignment ; .)
    PRINT           reduce using rule 7 (instruction -> assignment ; .)
    ID              reduce using rule 7 (instruction -> assignment ; .)
    $end            reduce using rule 7 (instruction -> assignment ; .)
    }               reduce using rule 7 (instruction -> assignment ; .)
    ELSE            reduce using rule 7 (instruction -> assignment ; .)


state 22

    (8) instruction -> statement ; .

    {               reduce using rule 8 (instruction -> statement ; .)
    IF              reduce using rule 8 (instruction -> statement ; .)
    WHILE           reduce using rule 8 (instruction -> statement ; .)
    FOR             reduce using rule 8 (instruction -> statement ; .)
    BREAK           reduce using rule 8 (instruction -> statement ; .)
    CONTINUE        reduce using rule 8 (instruction -> statement ; .)
    RETURN          reduce using rule 8 (instruction -> statement ; .)
    PRINT           reduce using rule 8 (instruction -> statement ; .)
    ID              reduce using rule 8 (instruction -> statement ; .)
    $end            reduce using rule 8 (instruction -> statement ; .)
    }               reduce using rule 8 (instruction -> statement ; .)
    ELSE            reduce using rule 8 (instruction -> statement ; .)


state 23

    (9) instruction -> { instructions . }

    }               shift and go to state 61


state 24

    (10) instruction -> IF ( . condition ) instruction
    (11) instruction -> IF ( . condition ) instruction ELSE instruction
    (15) condition -> . expression EQ expression
    (16) condition -> . expression NEQ expression
    (17) condition -> . expression LE expression
    (18) condition -> . expression GE expression
    (19) condition -> . expression < expression
    (20) condition -> . expression > expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    condition                      shift and go to state 62
    expression                     shift and go to state 63
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 25

    (12) instruction -> WHILE ( . condition ) instruction
    (15) condition -> . expression EQ expression
    (16) condition -> . expression NEQ expression
    (17) condition -> . expression LE expression
    (18) condition -> . expression GE expression
    (19) condition -> . expression < expression
    (20) condition -> . expression > expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    condition                      shift and go to state 64
    expression                     shift and go to state 63
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 26

    (13) instruction -> FOR var . = range instruction

    =               shift and go to state 65


state 27

    (46) var -> ID .

    =               reduce using rule 46 (var -> ID .)


state 28

    (26) assignment -> var assignment_op . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    var                            shift and go to state 46
    expression                     shift and go to state 66
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    matrix_function_name           shift and go to state 48

state 29

    (21) assignment_op -> MULASSIGN .

    [               reduce using rule 21 (assignment_op -> MULASSIGN .)
    -               reduce using rule 21 (assignment_op -> MULASSIGN .)
    ID              reduce using rule 21 (assignment_op -> MULASSIGN .)
    INT             reduce using rule 21 (assignment_op -> MULASSIGN .)
    FLOAT           reduce using rule 21 (assignment_op -> MULASSIGN .)
    EYE             reduce using rule 21 (assignment_op -> MULASSIGN .)
    ONES            reduce using rule 21 (assignment_op -> MULASSIGN .)
    ZEROS           reduce using rule 21 (assignment_op -> MULASSIGN .)


state 30

    (22) assignment_op -> DIVASSIGN .

    [               reduce using rule 22 (assignment_op -> DIVASSIGN .)
    -               reduce using rule 22 (assignment_op -> DIVASSIGN .)
    ID              reduce using rule 22 (assignment_op -> DIVASSIGN .)
    INT             reduce using rule 22 (assignment_op -> DIVASSIGN .)
    FLOAT           reduce using rule 22 (assignment_op -> DIVASSIGN .)
    EYE             reduce using rule 22 (assignment_op -> DIVASSIGN .)
    ONES            reduce using rule 22 (assignment_op -> DIVASSIGN .)
    ZEROS           reduce using rule 22 (assignment_op -> DIVASSIGN .)


state 31

    (23) assignment_op -> SUBASSIGN .

    [               reduce using rule 23 (assignment_op -> SUBASSIGN .)
    -               reduce using rule 23 (assignment_op -> SUBASSIGN .)
    ID              reduce using rule 23 (assignment_op -> SUBASSIGN .)
    INT             reduce using rule 23 (assignment_op -> SUBASSIGN .)
    FLOAT           reduce using rule 23 (assignment_op -> SUBASSIGN .)
    EYE             reduce using rule 23 (assignment_op -> SUBASSIGN .)
    ONES            reduce using rule 23 (assignment_op -> SUBASSIGN .)
    ZEROS           reduce using rule 23 (assignment_op -> SUBASSIGN .)


state 32

    (24) assignment_op -> ADDASSIGN .

    [               reduce using rule 24 (assignment_op -> ADDASSIGN .)
    -               reduce using rule 24 (assignment_op -> ADDASSIGN .)
    ID              reduce using rule 24 (assignment_op -> ADDASSIGN .)
    INT             reduce using rule 24 (assignment_op -> ADDASSIGN .)
    FLOAT           reduce using rule 24 (assignment_op -> ADDASSIGN .)
    EYE             reduce using rule 24 (assignment_op -> ADDASSIGN .)
    ONES            reduce using rule 24 (assignment_op -> ADDASSIGN .)
    ZEROS           reduce using rule 24 (assignment_op -> ADDASSIGN .)


state 33

    (25) assignment_op -> = .

    [               reduce using rule 25 (assignment_op -> = .)
    -               reduce using rule 25 (assignment_op -> = .)
    ID              reduce using rule 25 (assignment_op -> = .)
    INT             reduce using rule 25 (assignment_op -> = .)
    FLOAT           reduce using rule 25 (assignment_op -> = .)
    EYE             reduce using rule 25 (assignment_op -> = .)
    ONES            reduce using rule 25 (assignment_op -> = .)
    ZEROS           reduce using rule 25 (assignment_op -> = .)


state 34

    (27) assignment -> matrix_element assignment_op . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    matrix_element                 shift and go to state 43
    expression                     shift and go to state 67
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 35

    (28) assignment -> vector_element assignment_op . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    vector_element                 shift and go to state 44
    expression                     shift and go to state 68
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 36

    (71) statement -> RETURN expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ;               reduce using rule 71 (statement -> RETURN expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 37

    (67) uminus -> - . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 78
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 38

    (58) expression -> num_expression .

    +               reduce using rule 58 (expression -> num_expression .)
    -               reduce using rule 58 (expression -> num_expression .)
    *               reduce using rule 58 (expression -> num_expression .)
    /               reduce using rule 58 (expression -> num_expression .)
    DOTADD          reduce using rule 58 (expression -> num_expression .)
    DOTSUB          reduce using rule 58 (expression -> num_expression .)
    DOTMUL          reduce using rule 58 (expression -> num_expression .)
    DOTDIV          reduce using rule 58 (expression -> num_expression .)
    '               reduce using rule 58 (expression -> num_expression .)
    ;               reduce using rule 58 (expression -> num_expression .)
    ,               reduce using rule 58 (expression -> num_expression .)
    EQ              reduce using rule 58 (expression -> num_expression .)
    NEQ             reduce using rule 58 (expression -> num_expression .)
    LE              reduce using rule 58 (expression -> num_expression .)
    GE              reduce using rule 58 (expression -> num_expression .)
    <               reduce using rule 58 (expression -> num_expression .)
    >               reduce using rule 58 (expression -> num_expression .)
    :               reduce using rule 58 (expression -> num_expression .)
    )               reduce using rule 58 (expression -> num_expression .)
    {               reduce using rule 58 (expression -> num_expression .)
    IF              reduce using rule 58 (expression -> num_expression .)
    WHILE           reduce using rule 58 (expression -> num_expression .)
    FOR             reduce using rule 58 (expression -> num_expression .)
    BREAK           reduce using rule 58 (expression -> num_expression .)
    CONTINUE        reduce using rule 58 (expression -> num_expression .)
    RETURN          reduce using rule 58 (expression -> num_expression .)
    PRINT           reduce using rule 58 (expression -> num_expression .)
    ID              reduce using rule 58 (expression -> num_expression .)


state 39

    (59) expression -> matrix .

    +               reduce using rule 59 (expression -> matrix .)
    -               reduce using rule 59 (expression -> matrix .)
    *               reduce using rule 59 (expression -> matrix .)
    /               reduce using rule 59 (expression -> matrix .)
    DOTADD          reduce using rule 59 (expression -> matrix .)
    DOTSUB          reduce using rule 59 (expression -> matrix .)
    DOTMUL          reduce using rule 59 (expression -> matrix .)
    DOTDIV          reduce using rule 59 (expression -> matrix .)
    '               reduce using rule 59 (expression -> matrix .)
    ;               reduce using rule 59 (expression -> matrix .)
    ,               reduce using rule 59 (expression -> matrix .)
    EQ              reduce using rule 59 (expression -> matrix .)
    NEQ             reduce using rule 59 (expression -> matrix .)
    LE              reduce using rule 59 (expression -> matrix .)
    GE              reduce using rule 59 (expression -> matrix .)
    <               reduce using rule 59 (expression -> matrix .)
    >               reduce using rule 59 (expression -> matrix .)
    :               reduce using rule 59 (expression -> matrix .)
    )               reduce using rule 59 (expression -> matrix .)
    {               reduce using rule 59 (expression -> matrix .)
    IF              reduce using rule 59 (expression -> matrix .)
    WHILE           reduce using rule 59 (expression -> matrix .)
    FOR             reduce using rule 59 (expression -> matrix .)
    BREAK           reduce using rule 59 (expression -> matrix .)
    CONTINUE        reduce using rule 59 (expression -> matrix .)
    RETURN          reduce using rule 59 (expression -> matrix .)
    PRINT           reduce using rule 59 (expression -> matrix .)
    ID              reduce using rule 59 (expression -> matrix .)


state 40

    (60) expression -> matrix_function .

    +               reduce using rule 60 (expression -> matrix_function .)
    -               reduce using rule 60 (expression -> matrix_function .)
    *               reduce using rule 60 (expression -> matrix_function .)
    /               reduce using rule 60 (expression -> matrix_function .)
    DOTADD          reduce using rule 60 (expression -> matrix_function .)
    DOTSUB          reduce using rule 60 (expression -> matrix_function .)
    DOTMUL          reduce using rule 60 (expression -> matrix_function .)
    DOTDIV          reduce using rule 60 (expression -> matrix_function .)
    '               reduce using rule 60 (expression -> matrix_function .)
    ;               reduce using rule 60 (expression -> matrix_function .)
    ,               reduce using rule 60 (expression -> matrix_function .)
    EQ              reduce using rule 60 (expression -> matrix_function .)
    NEQ             reduce using rule 60 (expression -> matrix_function .)
    LE              reduce using rule 60 (expression -> matrix_function .)
    GE              reduce using rule 60 (expression -> matrix_function .)
    <               reduce using rule 60 (expression -> matrix_function .)
    >               reduce using rule 60 (expression -> matrix_function .)
    :               reduce using rule 60 (expression -> matrix_function .)
    )               reduce using rule 60 (expression -> matrix_function .)
    {               reduce using rule 60 (expression -> matrix_function .)
    IF              reduce using rule 60 (expression -> matrix_function .)
    WHILE           reduce using rule 60 (expression -> matrix_function .)
    FOR             reduce using rule 60 (expression -> matrix_function .)
    BREAK           reduce using rule 60 (expression -> matrix_function .)
    CONTINUE        reduce using rule 60 (expression -> matrix_function .)
    RETURN          reduce using rule 60 (expression -> matrix_function .)
    PRINT           reduce using rule 60 (expression -> matrix_function .)
    ID              reduce using rule 60 (expression -> matrix_function .)


state 41

    (61) expression -> uminus .

    +               reduce using rule 61 (expression -> uminus .)
    -               reduce using rule 61 (expression -> uminus .)
    *               reduce using rule 61 (expression -> uminus .)
    /               reduce using rule 61 (expression -> uminus .)
    DOTADD          reduce using rule 61 (expression -> uminus .)
    DOTSUB          reduce using rule 61 (expression -> uminus .)
    DOTMUL          reduce using rule 61 (expression -> uminus .)
    DOTDIV          reduce using rule 61 (expression -> uminus .)
    '               reduce using rule 61 (expression -> uminus .)
    ;               reduce using rule 61 (expression -> uminus .)
    ,               reduce using rule 61 (expression -> uminus .)
    EQ              reduce using rule 61 (expression -> uminus .)
    NEQ             reduce using rule 61 (expression -> uminus .)
    LE              reduce using rule 61 (expression -> uminus .)
    GE              reduce using rule 61 (expression -> uminus .)
    <               reduce using rule 61 (expression -> uminus .)
    >               reduce using rule 61 (expression -> uminus .)
    :               reduce using rule 61 (expression -> uminus .)
    )               reduce using rule 61 (expression -> uminus .)
    {               reduce using rule 61 (expression -> uminus .)
    IF              reduce using rule 61 (expression -> uminus .)
    WHILE           reduce using rule 61 (expression -> uminus .)
    FOR             reduce using rule 61 (expression -> uminus .)
    BREAK           reduce using rule 61 (expression -> uminus .)
    CONTINUE        reduce using rule 61 (expression -> uminus .)
    RETURN          reduce using rule 61 (expression -> uminus .)
    PRINT           reduce using rule 61 (expression -> uminus .)
    ID              reduce using rule 61 (expression -> uminus .)


state 42

    (62) expression -> transposition .

    +               reduce using rule 62 (expression -> transposition .)
    -               reduce using rule 62 (expression -> transposition .)
    *               reduce using rule 62 (expression -> transposition .)
    /               reduce using rule 62 (expression -> transposition .)
    DOTADD          reduce using rule 62 (expression -> transposition .)
    DOTSUB          reduce using rule 62 (expression -> transposition .)
    DOTMUL          reduce using rule 62 (expression -> transposition .)
    DOTDIV          reduce using rule 62 (expression -> transposition .)
    '               reduce using rule 62 (expression -> transposition .)
    ;               reduce using rule 62 (expression -> transposition .)
    ,               reduce using rule 62 (expression -> transposition .)
    EQ              reduce using rule 62 (expression -> transposition .)
    NEQ             reduce using rule 62 (expression -> transposition .)
    LE              reduce using rule 62 (expression -> transposition .)
    GE              reduce using rule 62 (expression -> transposition .)
    <               reduce using rule 62 (expression -> transposition .)
    >               reduce using rule 62 (expression -> transposition .)
    :               reduce using rule 62 (expression -> transposition .)
    )               reduce using rule 62 (expression -> transposition .)
    {               reduce using rule 62 (expression -> transposition .)
    IF              reduce using rule 62 (expression -> transposition .)
    WHILE           reduce using rule 62 (expression -> transposition .)
    FOR             reduce using rule 62 (expression -> transposition .)
    BREAK           reduce using rule 62 (expression -> transposition .)
    CONTINUE        reduce using rule 62 (expression -> transposition .)
    RETURN          reduce using rule 62 (expression -> transposition .)
    PRINT           reduce using rule 62 (expression -> transposition .)
    ID              reduce using rule 62 (expression -> transposition .)


state 43

    (63) expression -> matrix_element .

    +               reduce using rule 63 (expression -> matrix_element .)
    -               reduce using rule 63 (expression -> matrix_element .)
    *               reduce using rule 63 (expression -> matrix_element .)
    /               reduce using rule 63 (expression -> matrix_element .)
    DOTADD          reduce using rule 63 (expression -> matrix_element .)
    DOTSUB          reduce using rule 63 (expression -> matrix_element .)
    DOTMUL          reduce using rule 63 (expression -> matrix_element .)
    DOTDIV          reduce using rule 63 (expression -> matrix_element .)
    '               reduce using rule 63 (expression -> matrix_element .)
    ;               reduce using rule 63 (expression -> matrix_element .)
    ,               reduce using rule 63 (expression -> matrix_element .)
    EQ              reduce using rule 63 (expression -> matrix_element .)
    NEQ             reduce using rule 63 (expression -> matrix_element .)
    LE              reduce using rule 63 (expression -> matrix_element .)
    GE              reduce using rule 63 (expression -> matrix_element .)
    <               reduce using rule 63 (expression -> matrix_element .)
    >               reduce using rule 63 (expression -> matrix_element .)
    :               reduce using rule 63 (expression -> matrix_element .)
    )               reduce using rule 63 (expression -> matrix_element .)
    {               reduce using rule 63 (expression -> matrix_element .)
    IF              reduce using rule 63 (expression -> matrix_element .)
    WHILE           reduce using rule 63 (expression -> matrix_element .)
    FOR             reduce using rule 63 (expression -> matrix_element .)
    BREAK           reduce using rule 63 (expression -> matrix_element .)
    CONTINUE        reduce using rule 63 (expression -> matrix_element .)
    RETURN          reduce using rule 63 (expression -> matrix_element .)
    PRINT           reduce using rule 63 (expression -> matrix_element .)
    ID              reduce using rule 63 (expression -> matrix_element .)


state 44

    (64) expression -> vector_element .

    +               reduce using rule 64 (expression -> vector_element .)
    -               reduce using rule 64 (expression -> vector_element .)
    *               reduce using rule 64 (expression -> vector_element .)
    /               reduce using rule 64 (expression -> vector_element .)
    DOTADD          reduce using rule 64 (expression -> vector_element .)
    DOTSUB          reduce using rule 64 (expression -> vector_element .)
    DOTMUL          reduce using rule 64 (expression -> vector_element .)
    DOTDIV          reduce using rule 64 (expression -> vector_element .)
    '               reduce using rule 64 (expression -> vector_element .)
    ;               reduce using rule 64 (expression -> vector_element .)
    ,               reduce using rule 64 (expression -> vector_element .)
    EQ              reduce using rule 64 (expression -> vector_element .)
    NEQ             reduce using rule 64 (expression -> vector_element .)
    LE              reduce using rule 64 (expression -> vector_element .)
    GE              reduce using rule 64 (expression -> vector_element .)
    <               reduce using rule 64 (expression -> vector_element .)
    >               reduce using rule 64 (expression -> vector_element .)
    :               reduce using rule 64 (expression -> vector_element .)
    )               reduce using rule 64 (expression -> vector_element .)
    {               reduce using rule 64 (expression -> vector_element .)
    IF              reduce using rule 64 (expression -> vector_element .)
    WHILE           reduce using rule 64 (expression -> vector_element .)
    FOR             reduce using rule 64 (expression -> vector_element .)
    BREAK           reduce using rule 64 (expression -> vector_element .)
    CONTINUE        reduce using rule 64 (expression -> vector_element .)
    RETURN          reduce using rule 64 (expression -> vector_element .)
    PRINT           reduce using rule 64 (expression -> vector_element .)
    ID              reduce using rule 64 (expression -> vector_element .)


state 45

    (65) num_expression -> number .

    +               reduce using rule 65 (num_expression -> number .)
    -               reduce using rule 65 (num_expression -> number .)
    *               reduce using rule 65 (num_expression -> number .)
    /               reduce using rule 65 (num_expression -> number .)
    DOTADD          reduce using rule 65 (num_expression -> number .)
    DOTSUB          reduce using rule 65 (num_expression -> number .)
    DOTMUL          reduce using rule 65 (num_expression -> number .)
    DOTDIV          reduce using rule 65 (num_expression -> number .)
    '               reduce using rule 65 (num_expression -> number .)
    ;               reduce using rule 65 (num_expression -> number .)
    ,               reduce using rule 65 (num_expression -> number .)
    EQ              reduce using rule 65 (num_expression -> number .)
    NEQ             reduce using rule 65 (num_expression -> number .)
    LE              reduce using rule 65 (num_expression -> number .)
    GE              reduce using rule 65 (num_expression -> number .)
    <               reduce using rule 65 (num_expression -> number .)
    >               reduce using rule 65 (num_expression -> number .)
    :               reduce using rule 65 (num_expression -> number .)
    )               reduce using rule 65 (num_expression -> number .)
    {               reduce using rule 65 (num_expression -> number .)
    IF              reduce using rule 65 (num_expression -> number .)
    WHILE           reduce using rule 65 (num_expression -> number .)
    FOR             reduce using rule 65 (num_expression -> number .)
    BREAK           reduce using rule 65 (num_expression -> number .)
    CONTINUE        reduce using rule 65 (num_expression -> number .)
    RETURN          reduce using rule 65 (num_expression -> number .)
    PRINT           reduce using rule 65 (num_expression -> number .)
    ID              reduce using rule 65 (num_expression -> number .)


state 46

    (66) num_expression -> var .

    +               reduce using rule 66 (num_expression -> var .)
    -               reduce using rule 66 (num_expression -> var .)
    *               reduce using rule 66 (num_expression -> var .)
    /               reduce using rule 66 (num_expression -> var .)
    DOTADD          reduce using rule 66 (num_expression -> var .)
    DOTSUB          reduce using rule 66 (num_expression -> var .)
    DOTMUL          reduce using rule 66 (num_expression -> var .)
    DOTDIV          reduce using rule 66 (num_expression -> var .)
    '               reduce using rule 66 (num_expression -> var .)
    ;               reduce using rule 66 (num_expression -> var .)
    ,               reduce using rule 66 (num_expression -> var .)
    EQ              reduce using rule 66 (num_expression -> var .)
    NEQ             reduce using rule 66 (num_expression -> var .)
    LE              reduce using rule 66 (num_expression -> var .)
    GE              reduce using rule 66 (num_expression -> var .)
    <               reduce using rule 66 (num_expression -> var .)
    >               reduce using rule 66 (num_expression -> var .)
    :               reduce using rule 66 (num_expression -> var .)
    )               reduce using rule 66 (num_expression -> var .)
    {               reduce using rule 66 (num_expression -> var .)
    IF              reduce using rule 66 (num_expression -> var .)
    WHILE           reduce using rule 66 (num_expression -> var .)
    FOR             reduce using rule 66 (num_expression -> var .)
    BREAK           reduce using rule 66 (num_expression -> var .)
    CONTINUE        reduce using rule 66 (num_expression -> var .)
    RETURN          reduce using rule 66 (num_expression -> var .)
    PRINT           reduce using rule 66 (num_expression -> var .)
    ID              reduce using rule 66 (num_expression -> var .)


state 47

    (33) matrix -> [ . vectors ]
    (34) vectors -> . vectors , vector
    (35) vectors -> . vector
    (36) vector -> . [ variables ]

    [               shift and go to state 79

    vectors                        shift and go to state 80
    vector                         shift and go to state 81

state 48

    (29) matrix_function -> matrix_function_name . ( INT )

    (               shift and go to state 82


state 49

    (47) number -> INT .

    +               reduce using rule 47 (number -> INT .)
    -               reduce using rule 47 (number -> INT .)
    *               reduce using rule 47 (number -> INT .)
    /               reduce using rule 47 (number -> INT .)
    DOTADD          reduce using rule 47 (number -> INT .)
    DOTSUB          reduce using rule 47 (number -> INT .)
    DOTMUL          reduce using rule 47 (number -> INT .)
    DOTDIV          reduce using rule 47 (number -> INT .)
    '               reduce using rule 47 (number -> INT .)
    ;               reduce using rule 47 (number -> INT .)
    ,               reduce using rule 47 (number -> INT .)
    EQ              reduce using rule 47 (number -> INT .)
    NEQ             reduce using rule 47 (number -> INT .)
    LE              reduce using rule 47 (number -> INT .)
    GE              reduce using rule 47 (number -> INT .)
    <               reduce using rule 47 (number -> INT .)
    >               reduce using rule 47 (number -> INT .)
    :               reduce using rule 47 (number -> INT .)
    )               reduce using rule 47 (number -> INT .)
    {               reduce using rule 47 (number -> INT .)
    IF              reduce using rule 47 (number -> INT .)
    WHILE           reduce using rule 47 (number -> INT .)
    FOR             reduce using rule 47 (number -> INT .)
    BREAK           reduce using rule 47 (number -> INT .)
    CONTINUE        reduce using rule 47 (number -> INT .)
    RETURN          reduce using rule 47 (number -> INT .)
    PRINT           reduce using rule 47 (number -> INT .)
    ID              reduce using rule 47 (number -> INT .)
    ]               reduce using rule 47 (number -> INT .)


state 50

    (45) matrix_element -> ID . [ INT , INT ]
    (44) vector_element -> ID . [ INT ]
    (46) var -> ID .

    [               shift and go to state 60
    +               reduce using rule 46 (var -> ID .)
    -               reduce using rule 46 (var -> ID .)
    *               reduce using rule 46 (var -> ID .)
    /               reduce using rule 46 (var -> ID .)
    DOTADD          reduce using rule 46 (var -> ID .)
    DOTSUB          reduce using rule 46 (var -> ID .)
    DOTMUL          reduce using rule 46 (var -> ID .)
    DOTDIV          reduce using rule 46 (var -> ID .)
    '               reduce using rule 46 (var -> ID .)
    ;               reduce using rule 46 (var -> ID .)
    ,               reduce using rule 46 (var -> ID .)
    EQ              reduce using rule 46 (var -> ID .)
    NEQ             reduce using rule 46 (var -> ID .)
    LE              reduce using rule 46 (var -> ID .)
    GE              reduce using rule 46 (var -> ID .)
    <               reduce using rule 46 (var -> ID .)
    >               reduce using rule 46 (var -> ID .)
    :               reduce using rule 46 (var -> ID .)
    )               reduce using rule 46 (var -> ID .)
    {               reduce using rule 46 (var -> ID .)
    IF              reduce using rule 46 (var -> ID .)
    WHILE           reduce using rule 46 (var -> ID .)
    FOR             reduce using rule 46 (var -> ID .)
    BREAK           reduce using rule 46 (var -> ID .)
    CONTINUE        reduce using rule 46 (var -> ID .)
    RETURN          reduce using rule 46 (var -> ID .)
    PRINT           reduce using rule 46 (var -> ID .)
    ID              reduce using rule 46 (var -> ID .)


state 51

    (48) number -> FLOAT .

    +               reduce using rule 48 (number -> FLOAT .)
    -               reduce using rule 48 (number -> FLOAT .)
    *               reduce using rule 48 (number -> FLOAT .)
    /               reduce using rule 48 (number -> FLOAT .)
    DOTADD          reduce using rule 48 (number -> FLOAT .)
    DOTSUB          reduce using rule 48 (number -> FLOAT .)
    DOTMUL          reduce using rule 48 (number -> FLOAT .)
    DOTDIV          reduce using rule 48 (number -> FLOAT .)
    '               reduce using rule 48 (number -> FLOAT .)
    ;               reduce using rule 48 (number -> FLOAT .)
    ,               reduce using rule 48 (number -> FLOAT .)
    EQ              reduce using rule 48 (number -> FLOAT .)
    NEQ             reduce using rule 48 (number -> FLOAT .)
    LE              reduce using rule 48 (number -> FLOAT .)
    GE              reduce using rule 48 (number -> FLOAT .)
    <               reduce using rule 48 (number -> FLOAT .)
    >               reduce using rule 48 (number -> FLOAT .)
    :               reduce using rule 48 (number -> FLOAT .)
    )               reduce using rule 48 (number -> FLOAT .)
    {               reduce using rule 48 (number -> FLOAT .)
    IF              reduce using rule 48 (number -> FLOAT .)
    WHILE           reduce using rule 48 (number -> FLOAT .)
    FOR             reduce using rule 48 (number -> FLOAT .)
    BREAK           reduce using rule 48 (number -> FLOAT .)
    CONTINUE        reduce using rule 48 (number -> FLOAT .)
    RETURN          reduce using rule 48 (number -> FLOAT .)
    PRINT           reduce using rule 48 (number -> FLOAT .)
    ID              reduce using rule 48 (number -> FLOAT .)
    ]               reduce using rule 48 (number -> FLOAT .)


state 52

    (30) matrix_function_name -> EYE .

    (               reduce using rule 30 (matrix_function_name -> EYE .)


state 53

    (31) matrix_function_name -> ONES .

    (               reduce using rule 31 (matrix_function_name -> ONES .)


state 54

    (32) matrix_function_name -> ZEROS .

    (               reduce using rule 32 (matrix_function_name -> ZEROS .)


state 55

    (72) statement -> PRINT print_vals .
    (73) print_vals -> print_vals . , print_val

    ;               reduce using rule 72 (statement -> PRINT print_vals .)
    ,               shift and go to state 83


state 56

    (74) print_vals -> print_val .

    ,               reduce using rule 74 (print_vals -> print_val .)
    ;               reduce using rule 74 (print_vals -> print_val .)


state 57

    (75) print_val -> string .

    ,               reduce using rule 75 (print_val -> string .)
    ;               reduce using rule 75 (print_val -> string .)


state 58

    (76) print_val -> expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ,               reduce using rule 76 (print_val -> expression .)
    ;               reduce using rule 76 (print_val -> expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 59

    (49) string -> STRING .

    ,               reduce using rule 49 (string -> STRING .)
    ;               reduce using rule 49 (string -> STRING .)


state 60

    (45) matrix_element -> ID [ . INT , INT ]
    (44) vector_element -> ID [ . INT ]

    INT             shift and go to state 84


state 61

    (9) instruction -> { instructions } .

    {               reduce using rule 9 (instruction -> { instructions } .)
    IF              reduce using rule 9 (instruction -> { instructions } .)
    WHILE           reduce using rule 9 (instruction -> { instructions } .)
    FOR             reduce using rule 9 (instruction -> { instructions } .)
    BREAK           reduce using rule 9 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 9 (instruction -> { instructions } .)
    RETURN          reduce using rule 9 (instruction -> { instructions } .)
    PRINT           reduce using rule 9 (instruction -> { instructions } .)
    ID              reduce using rule 9 (instruction -> { instructions } .)
    $end            reduce using rule 9 (instruction -> { instructions } .)
    }               reduce using rule 9 (instruction -> { instructions } .)
    ELSE            reduce using rule 9 (instruction -> { instructions } .)


state 62

    (10) instruction -> IF ( condition . ) instruction
    (11) instruction -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 85


state 63

    (15) condition -> expression . EQ expression
    (16) condition -> expression . NEQ expression
    (17) condition -> expression . LE expression
    (18) condition -> expression . GE expression
    (19) condition -> expression . < expression
    (20) condition -> expression . > expression
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    EQ              shift and go to state 86
    NEQ             shift and go to state 87
    LE              shift and go to state 88
    GE              shift and go to state 89
    <               shift and go to state 90
    >               shift and go to state 91
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 64

    (12) instruction -> WHILE ( condition . ) instruction

    )               shift and go to state 92


state 65

    (13) instruction -> FOR var = . range instruction
    (14) range -> . expression : expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    var                            shift and go to state 46
    range                          shift and go to state 93
    expression                     shift and go to state 94
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    matrix_function_name           shift and go to state 48

state 66

    (26) assignment -> var assignment_op expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ;               reduce using rule 26 (assignment -> var assignment_op expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 67

    (27) assignment -> matrix_element assignment_op expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ;               reduce using rule 27 (assignment -> matrix_element assignment_op expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 68

    (28) assignment -> vector_element assignment_op expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ;               reduce using rule 28 (assignment -> vector_element assignment_op expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 69

    (50) expression -> expression + . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 95
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 70

    (51) expression -> expression - . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 96
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 71

    (52) expression -> expression * . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 97
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 72

    (53) expression -> expression / . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 98
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 73

    (54) expression -> expression DOTADD . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 99
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 74

    (55) expression -> expression DOTSUB . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 100
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 75

    (56) expression -> expression DOTMUL . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 101
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 76

    (57) expression -> expression DOTDIV . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 102
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 77

    (68) transposition -> expression ' .

    +               reduce using rule 68 (transposition -> expression ' .)
    -               reduce using rule 68 (transposition -> expression ' .)
    *               reduce using rule 68 (transposition -> expression ' .)
    /               reduce using rule 68 (transposition -> expression ' .)
    DOTADD          reduce using rule 68 (transposition -> expression ' .)
    DOTSUB          reduce using rule 68 (transposition -> expression ' .)
    DOTMUL          reduce using rule 68 (transposition -> expression ' .)
    DOTDIV          reduce using rule 68 (transposition -> expression ' .)
    '               reduce using rule 68 (transposition -> expression ' .)
    ;               reduce using rule 68 (transposition -> expression ' .)
    ,               reduce using rule 68 (transposition -> expression ' .)
    EQ              reduce using rule 68 (transposition -> expression ' .)
    NEQ             reduce using rule 68 (transposition -> expression ' .)
    LE              reduce using rule 68 (transposition -> expression ' .)
    GE              reduce using rule 68 (transposition -> expression ' .)
    <               reduce using rule 68 (transposition -> expression ' .)
    >               reduce using rule 68 (transposition -> expression ' .)
    :               reduce using rule 68 (transposition -> expression ' .)
    )               reduce using rule 68 (transposition -> expression ' .)
    {               reduce using rule 68 (transposition -> expression ' .)
    IF              reduce using rule 68 (transposition -> expression ' .)
    WHILE           reduce using rule 68 (transposition -> expression ' .)
    FOR             reduce using rule 68 (transposition -> expression ' .)
    BREAK           reduce using rule 68 (transposition -> expression ' .)
    CONTINUE        reduce using rule 68 (transposition -> expression ' .)
    RETURN          reduce using rule 68 (transposition -> expression ' .)
    PRINT           reduce using rule 68 (transposition -> expression ' .)
    ID              reduce using rule 68 (transposition -> expression ' .)


state 78

    (67) uminus -> - expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 67 (uminus -> - expression .)
    -               reduce using rule 67 (uminus -> - expression .)
    *               reduce using rule 67 (uminus -> - expression .)
    /               reduce using rule 67 (uminus -> - expression .)
    DOTADD          reduce using rule 67 (uminus -> - expression .)
    DOTSUB          reduce using rule 67 (uminus -> - expression .)
    DOTMUL          reduce using rule 67 (uminus -> - expression .)
    DOTDIV          reduce using rule 67 (uminus -> - expression .)
    ;               reduce using rule 67 (uminus -> - expression .)
    ,               reduce using rule 67 (uminus -> - expression .)
    EQ              reduce using rule 67 (uminus -> - expression .)
    NEQ             reduce using rule 67 (uminus -> - expression .)
    LE              reduce using rule 67 (uminus -> - expression .)
    GE              reduce using rule 67 (uminus -> - expression .)
    <               reduce using rule 67 (uminus -> - expression .)
    >               reduce using rule 67 (uminus -> - expression .)
    :               reduce using rule 67 (uminus -> - expression .)
    )               reduce using rule 67 (uminus -> - expression .)
    {               reduce using rule 67 (uminus -> - expression .)
    IF              reduce using rule 67 (uminus -> - expression .)
    WHILE           reduce using rule 67 (uminus -> - expression .)
    FOR             reduce using rule 67 (uminus -> - expression .)
    BREAK           reduce using rule 67 (uminus -> - expression .)
    CONTINUE        reduce using rule 67 (uminus -> - expression .)
    RETURN          reduce using rule 67 (uminus -> - expression .)
    PRINT           reduce using rule 67 (uminus -> - expression .)
    ID              reduce using rule 67 (uminus -> - expression .)
    '               shift and go to state 77

  ! '               [ reduce using rule 67 (uminus -> - expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! *               [ shift and go to state 71 ]
  ! /               [ shift and go to state 72 ]
  ! DOTADD          [ shift and go to state 73 ]
  ! DOTSUB          [ shift and go to state 74 ]
  ! DOTMUL          [ shift and go to state 75 ]
  ! DOTDIV          [ shift and go to state 76 ]


state 79

    (36) vector -> [ . variables ]
    (37) variables -> . variables , variable
    (38) variables -> . variable
    (39) variable -> . number
    (40) variable -> . var
    (41) variable -> . element
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (42) element -> . vector_element
    (43) element -> . matrix_element
    (44) vector_element -> . ID [ INT ]
    (45) matrix_element -> . ID [ INT , INT ]

    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    ID              shift and go to state 108

    variables                      shift and go to state 103
    variable                       shift and go to state 104
    number                         shift and go to state 105
    var                            shift and go to state 106
    element                        shift and go to state 107
    vector_element                 shift and go to state 109
    matrix_element                 shift and go to state 110

state 80

    (33) matrix -> [ vectors . ]
    (34) vectors -> vectors . , vector

    ]               shift and go to state 111
    ,               shift and go to state 112


state 81

    (35) vectors -> vector .

    ]               reduce using rule 35 (vectors -> vector .)
    ,               reduce using rule 35 (vectors -> vector .)


state 82

    (29) matrix_function -> matrix_function_name ( . INT )

    INT             shift and go to state 113


state 83

    (73) print_vals -> print_vals , . print_val
    (75) print_val -> . string
    (76) print_val -> . expression
    (49) string -> . STRING
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    STRING          shift and go to state 59
    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    print_val                      shift and go to state 114
    string                         shift and go to state 57
    expression                     shift and go to state 58
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 84

    (45) matrix_element -> ID [ INT . , INT ]
    (44) vector_element -> ID [ INT . ]

    ,               shift and go to state 115
    ]               shift and go to state 116


state 85

    (10) instruction -> IF ( condition ) . instruction
    (11) instruction -> IF ( condition ) . instruction ELSE instruction
    (7) instruction -> . assignment ;
    (8) instruction -> . statement ;
    (9) instruction -> . { instructions }
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (12) instruction -> . WHILE ( condition ) instruction
    (13) instruction -> . FOR var = range instruction
    (26) assignment -> . var assignment_op expression
    (27) assignment -> . matrix_element assignment_op expression
    (28) assignment -> . vector_element assignment_op expression
    (69) statement -> . BREAK
    (70) statement -> . CONTINUE
    (71) statement -> . RETURN expression
    (72) statement -> . PRINT print_vals
    (46) var -> . ID
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]

    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    instruction                    shift and go to state 117
    assignment                     shift and go to state 6
    statement                      shift and go to state 7
    var                            shift and go to state 12
    matrix_element                 shift and go to state 13
    vector_element                 shift and go to state 14

state 86

    (15) condition -> expression EQ . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 118
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 87

    (16) condition -> expression NEQ . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 119
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 88

    (17) condition -> expression LE . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 120
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 89

    (18) condition -> expression GE . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 121
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 90

    (19) condition -> expression < . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 122
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 91

    (20) condition -> expression > . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 123
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 92

    (12) instruction -> WHILE ( condition ) . instruction
    (7) instruction -> . assignment ;
    (8) instruction -> . statement ;
    (9) instruction -> . { instructions }
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (12) instruction -> . WHILE ( condition ) instruction
    (13) instruction -> . FOR var = range instruction
    (26) assignment -> . var assignment_op expression
    (27) assignment -> . matrix_element assignment_op expression
    (28) assignment -> . vector_element assignment_op expression
    (69) statement -> . BREAK
    (70) statement -> . CONTINUE
    (71) statement -> . RETURN expression
    (72) statement -> . PRINT print_vals
    (46) var -> . ID
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]

    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    instruction                    shift and go to state 124
    assignment                     shift and go to state 6
    statement                      shift and go to state 7
    var                            shift and go to state 12
    matrix_element                 shift and go to state 13
    vector_element                 shift and go to state 14

state 93

    (13) instruction -> FOR var = range . instruction
    (7) instruction -> . assignment ;
    (8) instruction -> . statement ;
    (9) instruction -> . { instructions }
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (12) instruction -> . WHILE ( condition ) instruction
    (13) instruction -> . FOR var = range instruction
    (26) assignment -> . var assignment_op expression
    (27) assignment -> . matrix_element assignment_op expression
    (28) assignment -> . vector_element assignment_op expression
    (69) statement -> . BREAK
    (70) statement -> . CONTINUE
    (71) statement -> . RETURN expression
    (72) statement -> . PRINT print_vals
    (46) var -> . ID
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]

    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    var                            shift and go to state 12
    instruction                    shift and go to state 125
    assignment                     shift and go to state 6
    statement                      shift and go to state 7
    matrix_element                 shift and go to state 13
    vector_element                 shift and go to state 14

state 94

    (14) range -> expression . : expression
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    :               shift and go to state 126
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 95

    (50) expression -> expression + expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 50 (expression -> expression + expression .)
    -               reduce using rule 50 (expression -> expression + expression .)
    ;               reduce using rule 50 (expression -> expression + expression .)
    ,               reduce using rule 50 (expression -> expression + expression .)
    EQ              reduce using rule 50 (expression -> expression + expression .)
    NEQ             reduce using rule 50 (expression -> expression + expression .)
    LE              reduce using rule 50 (expression -> expression + expression .)
    GE              reduce using rule 50 (expression -> expression + expression .)
    <               reduce using rule 50 (expression -> expression + expression .)
    >               reduce using rule 50 (expression -> expression + expression .)
    :               reduce using rule 50 (expression -> expression + expression .)
    )               reduce using rule 50 (expression -> expression + expression .)
    {               reduce using rule 50 (expression -> expression + expression .)
    IF              reduce using rule 50 (expression -> expression + expression .)
    WHILE           reduce using rule 50 (expression -> expression + expression .)
    FOR             reduce using rule 50 (expression -> expression + expression .)
    BREAK           reduce using rule 50 (expression -> expression + expression .)
    CONTINUE        reduce using rule 50 (expression -> expression + expression .)
    RETURN          reduce using rule 50 (expression -> expression + expression .)
    PRINT           reduce using rule 50 (expression -> expression + expression .)
    ID              reduce using rule 50 (expression -> expression + expression .)
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77

  ! *               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 50 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 50 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 50 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 50 (expression -> expression + expression .) ]
  ! '               [ reduce using rule 50 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]


state 96

    (51) expression -> expression - expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 51 (expression -> expression - expression .)
    -               reduce using rule 51 (expression -> expression - expression .)
    ;               reduce using rule 51 (expression -> expression - expression .)
    ,               reduce using rule 51 (expression -> expression - expression .)
    EQ              reduce using rule 51 (expression -> expression - expression .)
    NEQ             reduce using rule 51 (expression -> expression - expression .)
    LE              reduce using rule 51 (expression -> expression - expression .)
    GE              reduce using rule 51 (expression -> expression - expression .)
    <               reduce using rule 51 (expression -> expression - expression .)
    >               reduce using rule 51 (expression -> expression - expression .)
    :               reduce using rule 51 (expression -> expression - expression .)
    )               reduce using rule 51 (expression -> expression - expression .)
    {               reduce using rule 51 (expression -> expression - expression .)
    IF              reduce using rule 51 (expression -> expression - expression .)
    WHILE           reduce using rule 51 (expression -> expression - expression .)
    FOR             reduce using rule 51 (expression -> expression - expression .)
    BREAK           reduce using rule 51 (expression -> expression - expression .)
    CONTINUE        reduce using rule 51 (expression -> expression - expression .)
    RETURN          reduce using rule 51 (expression -> expression - expression .)
    PRINT           reduce using rule 51 (expression -> expression - expression .)
    ID              reduce using rule 51 (expression -> expression - expression .)
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77

  ! *               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 51 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 51 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 51 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 51 (expression -> expression - expression .) ]
  ! '               [ reduce using rule 51 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]


state 97

    (52) expression -> expression * expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 52 (expression -> expression * expression .)
    -               reduce using rule 52 (expression -> expression * expression .)
    *               reduce using rule 52 (expression -> expression * expression .)
    /               reduce using rule 52 (expression -> expression * expression .)
    DOTADD          reduce using rule 52 (expression -> expression * expression .)
    DOTSUB          reduce using rule 52 (expression -> expression * expression .)
    ;               reduce using rule 52 (expression -> expression * expression .)
    ,               reduce using rule 52 (expression -> expression * expression .)
    EQ              reduce using rule 52 (expression -> expression * expression .)
    NEQ             reduce using rule 52 (expression -> expression * expression .)
    LE              reduce using rule 52 (expression -> expression * expression .)
    GE              reduce using rule 52 (expression -> expression * expression .)
    <               reduce using rule 52 (expression -> expression * expression .)
    >               reduce using rule 52 (expression -> expression * expression .)
    :               reduce using rule 52 (expression -> expression * expression .)
    )               reduce using rule 52 (expression -> expression * expression .)
    {               reduce using rule 52 (expression -> expression * expression .)
    IF              reduce using rule 52 (expression -> expression * expression .)
    WHILE           reduce using rule 52 (expression -> expression * expression .)
    FOR             reduce using rule 52 (expression -> expression * expression .)
    BREAK           reduce using rule 52 (expression -> expression * expression .)
    CONTINUE        reduce using rule 52 (expression -> expression * expression .)
    RETURN          reduce using rule 52 (expression -> expression * expression .)
    PRINT           reduce using rule 52 (expression -> expression * expression .)
    ID              reduce using rule 52 (expression -> expression * expression .)
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77

  ! DOTMUL          [ reduce using rule 52 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 52 (expression -> expression * expression .) ]
  ! '               [ reduce using rule 52 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! *               [ shift and go to state 71 ]
  ! /               [ shift and go to state 72 ]
  ! DOTADD          [ shift and go to state 73 ]
  ! DOTSUB          [ shift and go to state 74 ]


state 98

    (53) expression -> expression / expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 53 (expression -> expression / expression .)
    -               reduce using rule 53 (expression -> expression / expression .)
    *               reduce using rule 53 (expression -> expression / expression .)
    /               reduce using rule 53 (expression -> expression / expression .)
    DOTADD          reduce using rule 53 (expression -> expression / expression .)
    DOTSUB          reduce using rule 53 (expression -> expression / expression .)
    ;               reduce using rule 53 (expression -> expression / expression .)
    ,               reduce using rule 53 (expression -> expression / expression .)
    EQ              reduce using rule 53 (expression -> expression / expression .)
    NEQ             reduce using rule 53 (expression -> expression / expression .)
    LE              reduce using rule 53 (expression -> expression / expression .)
    GE              reduce using rule 53 (expression -> expression / expression .)
    <               reduce using rule 53 (expression -> expression / expression .)
    >               reduce using rule 53 (expression -> expression / expression .)
    :               reduce using rule 53 (expression -> expression / expression .)
    )               reduce using rule 53 (expression -> expression / expression .)
    {               reduce using rule 53 (expression -> expression / expression .)
    IF              reduce using rule 53 (expression -> expression / expression .)
    WHILE           reduce using rule 53 (expression -> expression / expression .)
    FOR             reduce using rule 53 (expression -> expression / expression .)
    BREAK           reduce using rule 53 (expression -> expression / expression .)
    CONTINUE        reduce using rule 53 (expression -> expression / expression .)
    RETURN          reduce using rule 53 (expression -> expression / expression .)
    PRINT           reduce using rule 53 (expression -> expression / expression .)
    ID              reduce using rule 53 (expression -> expression / expression .)
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77

  ! DOTMUL          [ reduce using rule 53 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 53 (expression -> expression / expression .) ]
  ! '               [ reduce using rule 53 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! *               [ shift and go to state 71 ]
  ! /               [ shift and go to state 72 ]
  ! DOTADD          [ shift and go to state 73 ]
  ! DOTSUB          [ shift and go to state 74 ]


state 99

    (54) expression -> expression DOTADD expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 54 (expression -> expression DOTADD expression .)
    -               reduce using rule 54 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 54 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 54 (expression -> expression DOTADD expression .)
    ;               reduce using rule 54 (expression -> expression DOTADD expression .)
    ,               reduce using rule 54 (expression -> expression DOTADD expression .)
    EQ              reduce using rule 54 (expression -> expression DOTADD expression .)
    NEQ             reduce using rule 54 (expression -> expression DOTADD expression .)
    LE              reduce using rule 54 (expression -> expression DOTADD expression .)
    GE              reduce using rule 54 (expression -> expression DOTADD expression .)
    <               reduce using rule 54 (expression -> expression DOTADD expression .)
    >               reduce using rule 54 (expression -> expression DOTADD expression .)
    :               reduce using rule 54 (expression -> expression DOTADD expression .)
    )               reduce using rule 54 (expression -> expression DOTADD expression .)
    {               reduce using rule 54 (expression -> expression DOTADD expression .)
    IF              reduce using rule 54 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 54 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 54 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 54 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 54 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 54 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 54 (expression -> expression DOTADD expression .)
    ID              reduce using rule 54 (expression -> expression DOTADD expression .)
    *               shift and go to state 71
    /               shift and go to state 72
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77

  ! *               [ reduce using rule 54 (expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 54 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 54 (expression -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 54 (expression -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 73 ]
  ! DOTSUB          [ shift and go to state 74 ]


state 100

    (55) expression -> expression DOTSUB expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 55 (expression -> expression DOTSUB expression .)
    -               reduce using rule 55 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 55 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 55 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 55 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 55 (expression -> expression DOTSUB expression .)
    EQ              reduce using rule 55 (expression -> expression DOTSUB expression .)
    NEQ             reduce using rule 55 (expression -> expression DOTSUB expression .)
    LE              reduce using rule 55 (expression -> expression DOTSUB expression .)
    GE              reduce using rule 55 (expression -> expression DOTSUB expression .)
    <               reduce using rule 55 (expression -> expression DOTSUB expression .)
    >               reduce using rule 55 (expression -> expression DOTSUB expression .)
    :               reduce using rule 55 (expression -> expression DOTSUB expression .)
    )               reduce using rule 55 (expression -> expression DOTSUB expression .)
    {               reduce using rule 55 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 55 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 55 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 55 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 55 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 55 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 55 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 55 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 55 (expression -> expression DOTSUB expression .)
    *               shift and go to state 71
    /               shift and go to state 72
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77

  ! *               [ reduce using rule 55 (expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 55 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 55 (expression -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 55 (expression -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 73 ]
  ! DOTSUB          [ shift and go to state 74 ]


state 101

    (56) expression -> expression DOTMUL expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 56 (expression -> expression DOTMUL expression .)
    -               reduce using rule 56 (expression -> expression DOTMUL expression .)
    *               reduce using rule 56 (expression -> expression DOTMUL expression .)
    /               reduce using rule 56 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 56 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 56 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 56 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 56 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 56 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 56 (expression -> expression DOTMUL expression .)
    EQ              reduce using rule 56 (expression -> expression DOTMUL expression .)
    NEQ             reduce using rule 56 (expression -> expression DOTMUL expression .)
    LE              reduce using rule 56 (expression -> expression DOTMUL expression .)
    GE              reduce using rule 56 (expression -> expression DOTMUL expression .)
    <               reduce using rule 56 (expression -> expression DOTMUL expression .)
    >               reduce using rule 56 (expression -> expression DOTMUL expression .)
    :               reduce using rule 56 (expression -> expression DOTMUL expression .)
    )               reduce using rule 56 (expression -> expression DOTMUL expression .)
    {               reduce using rule 56 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 56 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 56 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 56 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 56 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 56 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 56 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 56 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 56 (expression -> expression DOTMUL expression .)
    '               shift and go to state 77

  ! '               [ reduce using rule 56 (expression -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! *               [ shift and go to state 71 ]
  ! /               [ shift and go to state 72 ]
  ! DOTADD          [ shift and go to state 73 ]
  ! DOTSUB          [ shift and go to state 74 ]
  ! DOTMUL          [ shift and go to state 75 ]
  ! DOTDIV          [ shift and go to state 76 ]


state 102

    (57) expression -> expression DOTDIV expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 57 (expression -> expression DOTDIV expression .)
    -               reduce using rule 57 (expression -> expression DOTDIV expression .)
    *               reduce using rule 57 (expression -> expression DOTDIV expression .)
    /               reduce using rule 57 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 57 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 57 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 57 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 57 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 57 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 57 (expression -> expression DOTDIV expression .)
    EQ              reduce using rule 57 (expression -> expression DOTDIV expression .)
    NEQ             reduce using rule 57 (expression -> expression DOTDIV expression .)
    LE              reduce using rule 57 (expression -> expression DOTDIV expression .)
    GE              reduce using rule 57 (expression -> expression DOTDIV expression .)
    <               reduce using rule 57 (expression -> expression DOTDIV expression .)
    >               reduce using rule 57 (expression -> expression DOTDIV expression .)
    :               reduce using rule 57 (expression -> expression DOTDIV expression .)
    )               reduce using rule 57 (expression -> expression DOTDIV expression .)
    {               reduce using rule 57 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 57 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 57 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 57 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 57 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 57 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 57 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 57 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 57 (expression -> expression DOTDIV expression .)
    '               shift and go to state 77

  ! '               [ reduce using rule 57 (expression -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! *               [ shift and go to state 71 ]
  ! /               [ shift and go to state 72 ]
  ! DOTADD          [ shift and go to state 73 ]
  ! DOTSUB          [ shift and go to state 74 ]
  ! DOTMUL          [ shift and go to state 75 ]
  ! DOTDIV          [ shift and go to state 76 ]


state 103

    (36) vector -> [ variables . ]
    (37) variables -> variables . , variable

    ]               shift and go to state 127
    ,               shift and go to state 128


state 104

    (38) variables -> variable .

    ]               reduce using rule 38 (variables -> variable .)
    ,               reduce using rule 38 (variables -> variable .)


state 105

    (39) variable -> number .

    ]               reduce using rule 39 (variable -> number .)
    ,               reduce using rule 39 (variable -> number .)


state 106

    (40) variable -> var .

    ]               reduce using rule 40 (variable -> var .)
    ,               reduce using rule 40 (variable -> var .)


state 107

    (41) variable -> element .

    ]               reduce using rule 41 (variable -> element .)
    ,               reduce using rule 41 (variable -> element .)


state 108

    (46) var -> ID .
    (44) vector_element -> ID . [ INT ]
    (45) matrix_element -> ID . [ INT , INT ]

    ]               reduce using rule 46 (var -> ID .)
    ,               reduce using rule 46 (var -> ID .)
    [               shift and go to state 129


state 109

    (42) element -> vector_element .

    ]               reduce using rule 42 (element -> vector_element .)
    ,               reduce using rule 42 (element -> vector_element .)


state 110

    (43) element -> matrix_element .

    ]               reduce using rule 43 (element -> matrix_element .)
    ,               reduce using rule 43 (element -> matrix_element .)


state 111

    (33) matrix -> [ vectors ] .

    +               reduce using rule 33 (matrix -> [ vectors ] .)
    -               reduce using rule 33 (matrix -> [ vectors ] .)
    *               reduce using rule 33 (matrix -> [ vectors ] .)
    /               reduce using rule 33 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 33 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 33 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 33 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 33 (matrix -> [ vectors ] .)
    '               reduce using rule 33 (matrix -> [ vectors ] .)
    ;               reduce using rule 33 (matrix -> [ vectors ] .)
    ,               reduce using rule 33 (matrix -> [ vectors ] .)
    EQ              reduce using rule 33 (matrix -> [ vectors ] .)
    NEQ             reduce using rule 33 (matrix -> [ vectors ] .)
    LE              reduce using rule 33 (matrix -> [ vectors ] .)
    GE              reduce using rule 33 (matrix -> [ vectors ] .)
    <               reduce using rule 33 (matrix -> [ vectors ] .)
    >               reduce using rule 33 (matrix -> [ vectors ] .)
    :               reduce using rule 33 (matrix -> [ vectors ] .)
    )               reduce using rule 33 (matrix -> [ vectors ] .)
    {               reduce using rule 33 (matrix -> [ vectors ] .)
    IF              reduce using rule 33 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 33 (matrix -> [ vectors ] .)
    FOR             reduce using rule 33 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 33 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 33 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 33 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 33 (matrix -> [ vectors ] .)
    ID              reduce using rule 33 (matrix -> [ vectors ] .)


state 112

    (34) vectors -> vectors , . vector
    (36) vector -> . [ variables ]

    [               shift and go to state 79

    vector                         shift and go to state 130

state 113

    (29) matrix_function -> matrix_function_name ( INT . )

    )               shift and go to state 131


state 114

    (73) print_vals -> print_vals , print_val .

    ,               reduce using rule 73 (print_vals -> print_vals , print_val .)
    ;               reduce using rule 73 (print_vals -> print_vals , print_val .)


state 115

    (45) matrix_element -> ID [ INT , . INT ]

    INT             shift and go to state 132


state 116

    (44) vector_element -> ID [ INT ] .

    MULASSIGN       reduce using rule 44 (vector_element -> ID [ INT ] .)
    DIVASSIGN       reduce using rule 44 (vector_element -> ID [ INT ] .)
    SUBASSIGN       reduce using rule 44 (vector_element -> ID [ INT ] .)
    ADDASSIGN       reduce using rule 44 (vector_element -> ID [ INT ] .)
    =               reduce using rule 44 (vector_element -> ID [ INT ] .)
    +               reduce using rule 44 (vector_element -> ID [ INT ] .)
    -               reduce using rule 44 (vector_element -> ID [ INT ] .)
    *               reduce using rule 44 (vector_element -> ID [ INT ] .)
    /               reduce using rule 44 (vector_element -> ID [ INT ] .)
    DOTADD          reduce using rule 44 (vector_element -> ID [ INT ] .)
    DOTSUB          reduce using rule 44 (vector_element -> ID [ INT ] .)
    DOTMUL          reduce using rule 44 (vector_element -> ID [ INT ] .)
    DOTDIV          reduce using rule 44 (vector_element -> ID [ INT ] .)
    '               reduce using rule 44 (vector_element -> ID [ INT ] .)
    ;               reduce using rule 44 (vector_element -> ID [ INT ] .)
    ,               reduce using rule 44 (vector_element -> ID [ INT ] .)
    EQ              reduce using rule 44 (vector_element -> ID [ INT ] .)
    NEQ             reduce using rule 44 (vector_element -> ID [ INT ] .)
    LE              reduce using rule 44 (vector_element -> ID [ INT ] .)
    GE              reduce using rule 44 (vector_element -> ID [ INT ] .)
    <               reduce using rule 44 (vector_element -> ID [ INT ] .)
    >               reduce using rule 44 (vector_element -> ID [ INT ] .)
    :               reduce using rule 44 (vector_element -> ID [ INT ] .)
    )               reduce using rule 44 (vector_element -> ID [ INT ] .)
    {               reduce using rule 44 (vector_element -> ID [ INT ] .)
    IF              reduce using rule 44 (vector_element -> ID [ INT ] .)
    WHILE           reduce using rule 44 (vector_element -> ID [ INT ] .)
    FOR             reduce using rule 44 (vector_element -> ID [ INT ] .)
    BREAK           reduce using rule 44 (vector_element -> ID [ INT ] .)
    CONTINUE        reduce using rule 44 (vector_element -> ID [ INT ] .)
    RETURN          reduce using rule 44 (vector_element -> ID [ INT ] .)
    PRINT           reduce using rule 44 (vector_element -> ID [ INT ] .)
    ID              reduce using rule 44 (vector_element -> ID [ INT ] .)
    ]               reduce using rule 44 (vector_element -> ID [ INT ] .)


state 117

    (10) instruction -> IF ( condition ) instruction .
    (11) instruction -> IF ( condition ) instruction . ELSE instruction

    {               reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    IF              reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    WHILE           reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    FOR             reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    BREAK           reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    RETURN          reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    PRINT           reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    ID              reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    $end            reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    }               reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    ELSE            shift and go to state 133

  ! ELSE            [ reduce using rule 10 (instruction -> IF ( condition ) instruction .) ]


state 118

    (15) condition -> expression EQ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 15 (condition -> expression EQ expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 119

    (16) condition -> expression NEQ expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 16 (condition -> expression NEQ expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 120

    (17) condition -> expression LE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 17 (condition -> expression LE expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 121

    (18) condition -> expression GE expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 18 (condition -> expression GE expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 122

    (19) condition -> expression < expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 19 (condition -> expression < expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 123

    (20) condition -> expression > expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 20 (condition -> expression > expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 124

    (12) instruction -> WHILE ( condition ) instruction .

    {               reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    IF              reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    FOR             reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    ID              reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    $end            reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    }               reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 12 (instruction -> WHILE ( condition ) instruction .)


state 125

    (13) instruction -> FOR var = range instruction .

    {               reduce using rule 13 (instruction -> FOR var = range instruction .)
    IF              reduce using rule 13 (instruction -> FOR var = range instruction .)
    WHILE           reduce using rule 13 (instruction -> FOR var = range instruction .)
    FOR             reduce using rule 13 (instruction -> FOR var = range instruction .)
    BREAK           reduce using rule 13 (instruction -> FOR var = range instruction .)
    CONTINUE        reduce using rule 13 (instruction -> FOR var = range instruction .)
    RETURN          reduce using rule 13 (instruction -> FOR var = range instruction .)
    PRINT           reduce using rule 13 (instruction -> FOR var = range instruction .)
    ID              reduce using rule 13 (instruction -> FOR var = range instruction .)
    $end            reduce using rule 13 (instruction -> FOR var = range instruction .)
    }               reduce using rule 13 (instruction -> FOR var = range instruction .)
    ELSE            reduce using rule 13 (instruction -> FOR var = range instruction .)


state 126

    (14) range -> expression : . expression
    (50) expression -> . expression + expression
    (51) expression -> . expression - expression
    (52) expression -> . expression * expression
    (53) expression -> . expression / expression
    (54) expression -> . expression DOTADD expression
    (55) expression -> . expression DOTSUB expression
    (56) expression -> . expression DOTMUL expression
    (57) expression -> . expression DOTDIV expression
    (58) expression -> . num_expression
    (59) expression -> . matrix
    (60) expression -> . matrix_function
    (61) expression -> . uminus
    (62) expression -> . transposition
    (63) expression -> . matrix_element
    (64) expression -> . vector_element
    (65) num_expression -> . number
    (66) num_expression -> . var
    (33) matrix -> . [ vectors ]
    (29) matrix_function -> . matrix_function_name ( INT )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (30) matrix_function_name -> . EYE
    (31) matrix_function_name -> . ONES
    (32) matrix_function_name -> . ZEROS

    [               shift and go to state 47
    -               shift and go to state 37
    ID              shift and go to state 50
    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 53
    ZEROS           shift and go to state 54

    expression                     shift and go to state 134
    num_expression                 shift and go to state 38
    matrix                         shift and go to state 39
    matrix_function                shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    matrix_element                 shift and go to state 43
    vector_element                 shift and go to state 44
    number                         shift and go to state 45
    var                            shift and go to state 46
    matrix_function_name           shift and go to state 48

state 127

    (36) vector -> [ variables ] .

    ]               reduce using rule 36 (vector -> [ variables ] .)
    ,               reduce using rule 36 (vector -> [ variables ] .)


state 128

    (37) variables -> variables , . variable
    (39) variable -> . number
    (40) variable -> . var
    (41) variable -> . element
    (47) number -> . INT
    (48) number -> . FLOAT
    (46) var -> . ID
    (42) element -> . vector_element
    (43) element -> . matrix_element
    (44) vector_element -> . ID [ INT ]
    (45) matrix_element -> . ID [ INT , INT ]

    INT             shift and go to state 49
    FLOAT           shift and go to state 51
    ID              shift and go to state 108

    variable                       shift and go to state 135
    number                         shift and go to state 105
    var                            shift and go to state 106
    element                        shift and go to state 107
    vector_element                 shift and go to state 109
    matrix_element                 shift and go to state 110

state 129

    (44) vector_element -> ID [ . INT ]
    (45) matrix_element -> ID [ . INT , INT ]

    INT             shift and go to state 136


state 130

    (34) vectors -> vectors , vector .

    ]               reduce using rule 34 (vectors -> vectors , vector .)
    ,               reduce using rule 34 (vectors -> vectors , vector .)


state 131

    (29) matrix_function -> matrix_function_name ( INT ) .

    +               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    -               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    *               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    /               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    DOTADD          reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    DOTSUB          reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    DOTMUL          reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    DOTDIV          reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    '               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    ;               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    ,               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    EQ              reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    NEQ             reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    LE              reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    GE              reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    <               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    >               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    :               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    )               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    {               reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    IF              reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    WHILE           reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    FOR             reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    BREAK           reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    CONTINUE        reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    RETURN          reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    PRINT           reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)
    ID              reduce using rule 29 (matrix_function -> matrix_function_name ( INT ) .)


state 132

    (45) matrix_element -> ID [ INT , INT . ]

    ]               shift and go to state 137


state 133

    (11) instruction -> IF ( condition ) instruction ELSE . instruction
    (7) instruction -> . assignment ;
    (8) instruction -> . statement ;
    (9) instruction -> . { instructions }
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (12) instruction -> . WHILE ( condition ) instruction
    (13) instruction -> . FOR var = range instruction
    (26) assignment -> . var assignment_op expression
    (27) assignment -> . matrix_element assignment_op expression
    (28) assignment -> . vector_element assignment_op expression
    (69) statement -> . BREAK
    (70) statement -> . CONTINUE
    (71) statement -> . RETURN expression
    (72) statement -> . PRINT print_vals
    (46) var -> . ID
    (45) matrix_element -> . ID [ INT , INT ]
    (44) vector_element -> . ID [ INT ]

    {               shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    BREAK           shift and go to state 15
    CONTINUE        shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    instruction                    shift and go to state 138
    assignment                     shift and go to state 6
    statement                      shift and go to state 7
    var                            shift and go to state 12
    matrix_element                 shift and go to state 13
    vector_element                 shift and go to state 14

state 134

    (14) range -> expression : expression .
    (50) expression -> expression . + expression
    (51) expression -> expression . - expression
    (52) expression -> expression . * expression
    (53) expression -> expression . / expression
    (54) expression -> expression . DOTADD expression
    (55) expression -> expression . DOTSUB expression
    (56) expression -> expression . DOTMUL expression
    (57) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    {               reduce using rule 14 (range -> expression : expression .)
    IF              reduce using rule 14 (range -> expression : expression .)
    WHILE           reduce using rule 14 (range -> expression : expression .)
    FOR             reduce using rule 14 (range -> expression : expression .)
    BREAK           reduce using rule 14 (range -> expression : expression .)
    CONTINUE        reduce using rule 14 (range -> expression : expression .)
    RETURN          reduce using rule 14 (range -> expression : expression .)
    PRINT           reduce using rule 14 (range -> expression : expression .)
    ID              reduce using rule 14 (range -> expression : expression .)
    +               shift and go to state 69
    -               shift and go to state 70
    *               shift and go to state 71
    /               shift and go to state 72
    DOTADD          shift and go to state 73
    DOTSUB          shift and go to state 74
    DOTMUL          shift and go to state 75
    DOTDIV          shift and go to state 76
    '               shift and go to state 77


state 135

    (37) variables -> variables , variable .

    ]               reduce using rule 37 (variables -> variables , variable .)
    ,               reduce using rule 37 (variables -> variables , variable .)


state 136

    (44) vector_element -> ID [ INT . ]
    (45) matrix_element -> ID [ INT . , INT ]

    ]               shift and go to state 116
    ,               shift and go to state 115


state 137

    (45) matrix_element -> ID [ INT , INT ] .

    MULASSIGN       reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    DIVASSIGN       reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    SUBASSIGN       reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    ADDASSIGN       reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    =               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    +               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    -               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    *               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    /               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    DOTADD          reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    DOTSUB          reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    DOTMUL          reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    DOTDIV          reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    '               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    ;               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    ,               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    EQ              reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    NEQ             reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    LE              reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    GE              reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    <               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    >               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    :               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    )               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    {               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    IF              reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    WHILE           reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    FOR             reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    BREAK           reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    CONTINUE        reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    RETURN          reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    PRINT           reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    ID              reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)
    ]               reduce using rule 45 (matrix_element -> ID [ INT , INT ] .)


state 138

    (11) instruction -> IF ( condition ) instruction ELSE instruction .

    {               reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    FOR             reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)

