
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIFXnonassocELSEnonassoc=nonassocINTnonassocFLOATnonassocADDASSIGNSUBASSIGNnonassocMULASSIGNDIVASSIGNleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GE ID IF INT LE MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROS empty :program : instructions_optinstructions_opt : instructions instructions_opt : emptyinstructions : instructions instruction\n                    | instruction\n                    | "{" instructions "}" instruction : statement ";"  instruction : IF \'(\' condition \')\' instructions %prec IFX  instruction : IF \'(\' condition \')\' instructions ELSE instructions  instruction : FOR ID \'=\' range instructions  instruction : WHILE \'(\' condition \')\' instructions  range : expression \':\' expression  condition : expression EQ expression\n                  | expression NEQ expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression \'<\' expression\n                  | expression \'>\' expression statement : assignment\n                  | print_statement assignment : variable "=" expression\n                   | variable "=" matrix_function\n                   | variable ADDASSIGN expression\n                   | variable SUBASSIGN expression\n                   | variable MULASSIGN expression\n                   | variable DIVASSIGN expression matrix_function : matrix_function_name "(" INT ")"  matrix_function_name : ZEROS\n                            | ONES\n                            | EYE  variable : ID\n                 | element\n                 | number  element : vector_element\n               | matrix_element vector_element : ID "[" INT "]"  matrix_element : ID "[" INT "," INT "]"  expression : expression \'+\' expression\n                   | expression \'-\' expression\n                   | expression \'*\' expression\n                   | expression \'/\' expression\n                   | expression DOTADD expression\n                   | expression DOTSUB expression\n                   | expression DOTMUL expression\n                   | expression DOTDIV expression\n                   | expression "\'"\n                   | "-" expression\n                   | "(" expression ")"\n                   | variable  number : INT\n               | FLOAT  print_statement : PRINT printables  printables : printables "," printable\n                   | printable  printable : STRING\n                  | variable  statement : BREAK  statement : CONTINUE  statement : RETURN variable '
    
_lr_action_items = {'{':([0,6,10,19,20,21,22,23,24,47,63,78,79,80,82,84,87,95,96,97,98,99,100,101,102,108,109,110,],[6,6,-32,-33,-34,-35,-36,-51,-52,-50,6,-47,-48,6,-37,6,-49,-39,-40,-41,-42,-43,-44,-45,-46,6,-13,-38,]),'$end':([0,1,2,3,4,5,25,27,42,88,103,106,112,],[-1,0,-2,-3,-4,-6,-5,-8,-7,-9,-11,-12,-10,]),'IF':([0,3,5,6,10,19,20,21,22,23,24,25,26,27,42,47,63,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,106,108,109,110,112,],[8,8,-6,8,-32,-33,-34,-35,-36,-51,-52,-5,8,-8,-7,-50,8,-47,-48,8,-37,8,-49,-9,-39,-40,-41,-42,-43,-44,-45,-46,-11,8,8,-13,-38,-10,]),'FOR':([0,3,5,6,10,19,20,21,22,23,24,25,26,27,42,47,63,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,106,108,109,110,112,],[9,9,-6,9,-32,-33,-34,-35,-36,-51,-52,-5,9,-8,-7,-50,9,-47,-48,9,-37,9,-49,-9,-39,-40,-41,-42,-43,-44,-45,-46,-11,9,9,-13,-38,-10,]),'WHILE':([0,3,5,6,10,19,20,21,22,23,24,25,26,27,42,47,63,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,106,108,109,110,112,],[11,11,-6,11,-32,-33,-34,-35,-36,-51,-52,-5,11,-8,-7,-50,11,-47,-48,11,-37,11,-49,-9,-39,-40,-41,-42,-43,-44,-45,-46,-11,11,11,-13,-38,-10,]),'BREAK':([0,3,5,6,10,19,20,21,22,23,24,25,26,27,42,47,63,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,106,108,109,110,112,],[14,14,-6,14,-32,-33,-34,-35,-36,-51,-52,-5,14,-8,-7,-50,14,-47,-48,14,-37,14,-49,-9,-39,-40,-41,-42,-43,-44,-45,-46,-11,14,14,-13,-38,-10,]),'CONTINUE':([0,3,5,6,10,19,20,21,22,23,24,25,26,27,42,47,63,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,106,108,109,110,112,],[15,15,-6,15,-32,-33,-34,-35,-36,-51,-52,-5,15,-8,-7,-50,15,-47,-48,15,-37,15,-49,-9,-39,-40,-41,-42,-43,-44,-45,-46,-11,15,15,-13,-38,-10,]),'RETURN':([0,3,5,6,10,19,20,21,22,23,24,25,26,27,42,47,63,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,106,108,109,110,112,],[16,16,-6,16,-32,-33,-34,-35,-36,-51,-52,-5,16,-8,-7,-50,16,-47,-48,16,-37,16,-49,-9,-39,-40,-41,-42,-43,-44,-45,-46,-11,16,16,-13,-38,-10,]),'PRINT':([0,3,5,6,10,19,20,21,22,23,24,25,26,27,42,47,63,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,106,108,109,110,112,],[18,18,-6,18,-32,-33,-34,-35,-36,-51,-52,-5,18,-8,-7,-50,18,-47,-48,18,-37,18,-49,-9,-39,-40,-41,-42,-43,-44,-45,-46,-11,18,18,-13,-38,-10,]),'ID':([0,3,5,6,9,10,16,18,19,20,21,22,23,24,25,26,27,28,31,33,34,35,36,37,42,43,46,47,48,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,104,106,108,109,110,112,],[10,10,-6,10,29,-32,10,10,-33,-34,-35,-36,-51,-52,-5,10,-8,10,10,10,10,10,10,10,-7,10,10,-50,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-47,-48,10,-37,10,-49,-9,-39,-40,-41,-42,-43,-44,-45,-46,-11,10,10,10,-13,-38,-10,]),'INT':([0,3,5,6,10,16,18,19,20,21,22,23,24,25,26,27,28,30,31,33,34,35,36,37,42,43,46,47,48,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,87,88,95,96,97,98,99,100,101,102,103,104,106,108,109,110,112,],[23,23,-6,23,-32,23,23,-33,-34,-35,-36,-51,-52,-5,23,-8,23,49,23,23,23,23,23,23,-7,23,23,-50,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-47,-48,23,-37,105,23,107,-49,23,-39,-40,-41,-42,-43,-44,-45,-46,23,23,23,23,-13,-38,23,]),'FLOAT':([0,3,5,6,10,16,18,19,20,21,22,23,24,25,26,27,28,31,33,34,35,36,37,42,43,46,47,48,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,84,87,88,95,96,97,98,99,100,101,102,103,104,106,108,109,110,112,],[24,24,-6,24,-32,24,24,-33,-34,-35,-36,-51,-52,-5,24,-8,24,24,24,24,24,24,24,-7,24,24,-50,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-47,-48,24,-37,24,-49,24,-39,-40,-41,-42,-43,-44,-45,-46,24,24,24,24,-13,-38,24,]),'}':([5,25,26,27,42,88,103,106,112,],[-6,-5,42,-8,-7,-9,-11,-12,-10,]),'ELSE':([5,25,27,42,88,103,106,112,],[-6,-5,-8,-7,108,-11,-12,-10,]),';':([7,10,12,13,14,15,19,20,21,22,23,24,32,38,39,40,41,47,51,52,57,58,59,60,78,79,82,86,87,95,96,97,98,99,100,101,102,110,111,],[27,-32,-20,-21,-58,-59,-33,-34,-35,-36,-51,-52,-60,-53,-55,-56,-57,-50,-22,-23,-24,-25,-26,-27,-47,-48,-37,-54,-49,-39,-40,-41,-42,-43,-44,-45,-46,-38,-28,]),'(':([8,11,28,31,33,34,35,36,37,43,46,48,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,104,],[28,31,43,43,43,43,43,43,43,43,43,43,85,-29,-30,-31,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'=':([10,17,19,20,21,22,23,24,29,82,110,],[-32,33,-33,-34,-35,-36,-51,-52,48,-37,-38,]),'ADDASSIGN':([10,17,19,20,21,22,23,24,82,110,],[-32,34,-33,-34,-35,-36,-51,-52,-37,-38,]),'SUBASSIGN':([10,17,19,20,21,22,23,24,82,110,],[-32,35,-33,-34,-35,-36,-51,-52,-37,-38,]),'MULASSIGN':([10,17,19,20,21,22,23,24,82,110,],[-32,36,-33,-34,-35,-36,-51,-52,-37,-38,]),'DIVASSIGN':([10,17,19,20,21,22,23,24,82,110,],[-32,37,-33,-34,-35,-36,-51,-52,-37,-38,]),',':([10,19,20,21,22,23,24,38,39,40,41,49,82,86,110,],[-32,-33,-34,-35,-36,-51,-52,61,-55,-56,-57,83,-37,-54,-38,]),'EQ':([10,19,20,21,22,23,24,45,47,78,79,82,87,95,96,97,98,99,100,101,102,110,],[-32,-33,-34,-35,-36,-51,-52,64,-50,-47,-48,-37,-49,-39,-40,-41,-42,-43,-44,-45,-46,-38,]),'NEQ':([10,19,20,21,22,23,24,45,47,78,79,82,87,95,96,97,98,99,100,101,102,110,],[-32,-33,-34,-35,-36,-51,-52,65,-50,-47,-48,-37,-49,-39,-40,-41,-42,-43,-44,-45,-46,-38,]),'LE':([10,19,20,21,22,23,24,45,47,78,79,82,87,95,96,97,98,99,100,101,102,110,],[-32,-33,-34,-35,-36,-51,-52,66,-50,-47,-48,-37,-49,-39,-40,-41,-42,-43,-44,-45,-46,-38,]),'GE':([10,19,20,21,22,23,24,45,47,78,79,82,87,95,96,97,98,99,100,101,102,110,],[-32,-33,-34,-35,-36,-51,-52,67,-50,-47,-48,-37,-49,-39,-40,-41,-42,-43,-44,-45,-46,-38,]),'<':([10,19,20,21,22,23,24,45,47,78,79,82,87,95,96,97,98,99,100,101,102,110,],[-32,-33,-34,-35,-36,-51,-52,68,-50,-47,-48,-37,-49,-39,-40,-41,-42,-43,-44,-45,-46,-38,]),'>':([10,19,20,21,22,23,24,45,47,78,79,82,87,95,96,97,98,99,100,101,102,110,],[-32,-33,-34,-35,-36,-51,-52,69,-50,-47,-48,-37,-49,-39,-40,-41,-42,-43,-44,-45,-46,-38,]),'+':([10,19,20,21,22,23,24,45,47,51,57,58,59,60,62,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,],[-32,-33,-34,-35,-36,-51,-52,70,-50,70,70,70,70,70,70,-47,-48,70,-37,-49,70,70,70,70,70,70,-39,-40,-41,-42,-43,-44,-45,-46,70,-38,]),'-':([10,19,20,21,22,23,24,28,31,33,34,35,36,37,43,45,46,47,48,51,57,58,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,109,110,],[-32,-33,-34,-35,-36,-51,-52,46,46,46,46,46,46,46,46,71,46,-50,46,71,71,71,71,71,71,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-47,-48,71,-37,-49,71,71,71,71,71,71,-39,-40,-41,-42,-43,-44,-45,-46,46,71,-38,]),'*':([10,19,20,21,22,23,24,45,47,51,57,58,59,60,62,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,],[-32,-33,-34,-35,-36,-51,-52,72,-50,72,72,72,72,72,72,-47,72,72,-37,-49,72,72,72,72,72,72,72,72,-41,-42,72,72,-45,-46,72,-38,]),'/':([10,19,20,21,22,23,24,45,47,51,57,58,59,60,62,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,],[-32,-33,-34,-35,-36,-51,-52,73,-50,73,73,73,73,73,73,-47,73,73,-37,-49,73,73,73,73,73,73,73,73,-41,-42,73,73,-45,-46,73,-38,]),'DOTADD':([10,19,20,21,22,23,24,45,47,51,57,58,59,60,62,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,],[-32,-33,-34,-35,-36,-51,-52,74,-50,74,74,74,74,74,74,-47,-48,74,-37,-49,74,74,74,74,74,74,-39,-40,-41,-42,-43,-44,-45,-46,74,-38,]),'DOTSUB':([10,19,20,21,22,23,24,45,47,51,57,58,59,60,62,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,],[-32,-33,-34,-35,-36,-51,-52,75,-50,75,75,75,75,75,75,-47,-48,75,-37,-49,75,75,75,75,75,75,-39,-40,-41,-42,-43,-44,-45,-46,75,-38,]),'DOTMUL':([10,19,20,21,22,23,24,45,47,51,57,58,59,60,62,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,],[-32,-33,-34,-35,-36,-51,-52,76,-50,76,76,76,76,76,76,-47,76,76,-37,-49,76,76,76,76,76,76,76,76,-41,-42,76,76,-45,-46,76,-38,]),'DOTDIV':([10,19,20,21,22,23,24,45,47,51,57,58,59,60,62,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,],[-32,-33,-34,-35,-36,-51,-52,77,-50,77,77,77,77,77,77,-47,77,77,-37,-49,77,77,77,77,77,77,77,77,-41,-42,77,77,-45,-46,77,-38,]),"'":([10,19,20,21,22,23,24,45,47,51,57,58,59,60,62,78,79,81,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,110,],[-32,-33,-34,-35,-36,-51,-52,78,-50,78,78,78,78,78,78,-47,-48,78,-37,-49,78,78,78,78,78,78,-39,-40,-41,-42,-43,-44,-45,-46,78,-38,]),')':([10,19,20,21,22,23,24,44,47,50,62,78,79,82,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,110,],[-32,-33,-34,-35,-36,-51,-52,63,-50,84,87,-47,-48,-37,-49,-14,-15,-16,-17,-18,-19,-39,-40,-41,-42,-43,-44,-45,-46,111,-38,]),':':([10,19,20,21,22,23,24,47,78,79,81,82,87,95,96,97,98,99,100,101,102,110,],[-32,-33,-34,-35,-36,-51,-52,-50,-47,-48,104,-37,-49,-39,-40,-41,-42,-43,-44,-45,-46,-38,]),'[':([10,],[30,]),'STRING':([18,61,],[40,40,]),'ZEROS':([33,],[54,]),'ONES':([33,],[55,]),'EYE':([33,],[56,]),']':([49,105,],[82,110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,6,63,80,84,108,],[3,26,88,103,106,112,]),'empty':([0,],[4,]),'instruction':([0,3,6,26,63,80,84,88,103,106,108,112,],[5,25,5,25,5,5,5,25,25,25,5,25,]),'statement':([0,3,6,26,63,80,84,88,103,106,108,112,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'assignment':([0,3,6,26,63,80,84,88,103,106,108,112,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'print_statement':([0,3,6,26,63,80,84,88,103,106,108,112,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'variable':([0,3,6,16,18,26,28,31,33,34,35,36,37,43,46,48,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,84,88,103,104,106,108,112,],[17,17,17,32,41,17,47,47,47,47,47,47,47,47,47,47,41,17,47,47,47,47,47,47,47,47,47,47,47,47,47,47,17,17,17,17,47,17,17,17,]),'element':([0,3,6,16,18,26,28,31,33,34,35,36,37,43,46,48,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,84,88,103,104,106,108,112,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'number':([0,3,6,16,18,26,28,31,33,34,35,36,37,43,46,48,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,84,88,103,104,106,108,112,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'vector_element':([0,3,6,16,18,26,28,31,33,34,35,36,37,43,46,48,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,84,88,103,104,106,108,112,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'matrix_element':([0,3,6,16,18,26,28,31,33,34,35,36,37,43,46,48,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,84,88,103,104,106,108,112,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'printables':([18,],[38,]),'printable':([18,61,],[39,86,]),'condition':([28,31,],[44,50,]),'expression':([28,31,33,34,35,36,37,43,46,48,64,65,66,67,68,69,70,71,72,73,74,75,76,77,104,],[45,45,51,57,58,59,60,62,79,81,89,90,91,92,93,94,95,96,97,98,99,100,101,102,109,]),'matrix_function':([33,],[52,]),'matrix_function_name':([33,],[53,]),'range':([48,],[80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','Mparser.py',30),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',34),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',38),
  ('instructions_opt -> empty','instructions_opt',1,'p_instructions_opt_2','Mparser.py',42),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',46),
  ('instructions -> instruction','instructions',1,'p_instructions','Mparser.py',47),
  ('instructions -> { instructions }','instructions',3,'p_instructions','Mparser.py',48),
  ('instruction -> statement ;','instruction',2,'p_instruction','Mparser.py',52),
  ('instruction -> IF ( condition ) instructions','instruction',5,'p_instruction_if','Mparser.py',56),
  ('instruction -> IF ( condition ) instructions ELSE instructions','instruction',7,'p_instruction_if_else','Mparser.py',60),
  ('instruction -> FOR ID = range instructions','instruction',5,'p_instruction_for','Mparser.py',64),
  ('instruction -> WHILE ( condition ) instructions','instruction',5,'p_instruction_while','Mparser.py',68),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',72),
  ('condition -> expression EQ expression','condition',3,'p_condition','Mparser.py',76),
  ('condition -> expression NEQ expression','condition',3,'p_condition','Mparser.py',77),
  ('condition -> expression LE expression','condition',3,'p_condition','Mparser.py',78),
  ('condition -> expression GE expression','condition',3,'p_condition','Mparser.py',79),
  ('condition -> expression < expression','condition',3,'p_condition','Mparser.py',80),
  ('condition -> expression > expression','condition',3,'p_condition','Mparser.py',81),
  ('statement -> assignment','statement',1,'p_statement','Mparser.py',85),
  ('statement -> print_statement','statement',1,'p_statement','Mparser.py',86),
  ('assignment -> variable = expression','assignment',3,'p_assignment','Mparser.py',90),
  ('assignment -> variable = matrix_function','assignment',3,'p_assignment','Mparser.py',91),
  ('assignment -> variable ADDASSIGN expression','assignment',3,'p_assignment','Mparser.py',92),
  ('assignment -> variable SUBASSIGN expression','assignment',3,'p_assignment','Mparser.py',93),
  ('assignment -> variable MULASSIGN expression','assignment',3,'p_assignment','Mparser.py',94),
  ('assignment -> variable DIVASSIGN expression','assignment',3,'p_assignment','Mparser.py',95),
  ('matrix_function -> matrix_function_name ( INT )','matrix_function',4,'p_matrix_function','Mparser.py',99),
  ('matrix_function_name -> ZEROS','matrix_function_name',1,'p_matrix_function_name','Mparser.py',103),
  ('matrix_function_name -> ONES','matrix_function_name',1,'p_matrix_function_name','Mparser.py',104),
  ('matrix_function_name -> EYE','matrix_function_name',1,'p_matrix_function_name','Mparser.py',105),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',109),
  ('variable -> element','variable',1,'p_variable','Mparser.py',110),
  ('variable -> number','variable',1,'p_variable','Mparser.py',111),
  ('element -> vector_element','element',1,'p_element','Mparser.py',115),
  ('element -> matrix_element','element',1,'p_element','Mparser.py',116),
  ('vector_element -> ID [ INT ]','vector_element',4,'p_vector_element','Mparser.py',120),
  ('matrix_element -> ID [ INT , INT ]','matrix_element',6,'p_matrix_element','Mparser.py',124),
  ('expression -> expression + expression','expression',3,'p_expression','Mparser.py',128),
  ('expression -> expression - expression','expression',3,'p_expression','Mparser.py',129),
  ('expression -> expression * expression','expression',3,'p_expression','Mparser.py',130),
  ('expression -> expression / expression','expression',3,'p_expression','Mparser.py',131),
  ('expression -> expression DOTADD expression','expression',3,'p_expression','Mparser.py',132),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression','Mparser.py',133),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression','Mparser.py',134),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression','Mparser.py',135),
  ("expression -> expression '",'expression',2,'p_expression','Mparser.py',136),
  ('expression -> - expression','expression',2,'p_expression','Mparser.py',137),
  ('expression -> ( expression )','expression',3,'p_expression','Mparser.py',138),
  ('expression -> variable','expression',1,'p_expression','Mparser.py',139),
  ('number -> INT','number',1,'p_number','Mparser.py',143),
  ('number -> FLOAT','number',1,'p_number','Mparser.py',144),
  ('print_statement -> PRINT printables','print_statement',2,'p_print_statement','Mparser.py',148),
  ('printables -> printables , printable','printables',3,'p_printables','Mparser.py',152),
  ('printables -> printable','printables',1,'p_printables','Mparser.py',153),
  ('printable -> STRING','printable',1,'p_printable','Mparser.py',157),
  ('printable -> variable','printable',1,'p_printable','Mparser.py',158),
  ('statement -> BREAK','statement',1,'p_break_statement','Mparser.py',162),
  ('statement -> CONTINUE','statement',1,'p_continue_statement','Mparser.py',166),
  ('statement -> RETURN variable','statement',2,'p_return_statement','Mparser.py',170),
]
